#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ —Ä–µ—Ü–µ–ø—Ç—É—Ä –≤ Odoo
–ê–≤—Ç–æ—Ä: Claude AI Assistant
–î–∞—Ç–∞: 09.08.2025
"""

import xmlrpc.client
import ssl
import sys
from datetime import datetime, timedelta

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
ODOO_URL = "https://odoosportspitproject-production.up.railway.app"
DB_NAME = "odoo_sportpit"
USERNAME = "danila@usafitandjoy.com"
PASSWORD = "admin_sportpit_2024"

def connect_to_odoo():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Odoo —á–µ—Ä–µ–∑ XML-RPC"""
    print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Odoo...")
    
    ssl_context = ssl.create_default_context()
    ssl_context.check_hostname = False
    ssl_context.verify_mode = ssl.CERT_NONE
    
    try:
        common = xmlrpc.client.ServerProxy(
            f'{ODOO_URL}/xmlrpc/2/common',
            context=ssl_context
        )
        
        uid = common.authenticate(DB_NAME, USERNAME, PASSWORD, {})
        
        if uid:
            print(f"‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
            models = xmlrpc.client.ServerProxy(
                f'{ODOO_URL}/xmlrpc/2/object',
                context=ssl_context
            )
            return uid, models
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            return None, None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return None, None

def get_product_id(uid, models, default_code):
    """–ü–æ–ª—É—á–∏—Ç—å ID –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ –∫–æ–¥—É"""
    try:
        product_ids = models.execute_kw(
            DB_NAME, uid, PASSWORD,
            'product.product', 'search',
            [[('default_code', '=', default_code)]]
        )
        return product_ids[0] if product_ids else False
    except:
        return False

def create_bom(uid, models, materials, packaging, products):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç—É—Ä (Bill of Materials)"""
    print("\nüìã –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç—É—Ä (BoM)...")
    
    boms = [
        {
            'name': 'Whey Protein –í–∞–Ω–∏–ª—å 2–∫–≥',
            'product_code': 'FIN-WHEY-VAN-2KG',
            'components': [
                ('RAW-WHEY-80', 1.95),      # –°—ã–≤–æ—Ä–æ—Ç–æ—á–Ω—ã–π –ø—Ä–æ—Ç–µ–∏–Ω
                ('RAW-FLAV-VAN', 0.03),     # –ê—Ä–æ–º–∞—Ç–∏–∑–∞—Ç–æ—Ä –≤–∞–Ω–∏–ª—å
                ('RAW-SUCRALOSE', 0.02),    # –ü–æ–¥—Å–ª–∞—Å—Ç–∏—Ç–µ–ª—å
                ('PACK-JAR-2KG', 1),        # –ë–∞–Ω–∫–∞ 2–∫–≥
                ('PACK-LABEL', 1),          # –≠—Ç–∏–∫–µ—Ç–∫–∞
                ('PACK-SCOOP', 1),          # –ú–µ—Ä–Ω–∞—è –ª–æ–∂–∫–∞
            ]
        },
        {
            'name': 'Whey Protein –®–æ–∫–æ–ª–∞–¥ 2–∫–≥',
            'product_code': 'FIN-WHEY-CHOC-2KG',
            'components': [
                ('RAW-WHEY-80', 1.95),
                ('RAW-FLAV-CHOC', 0.03),
                ('RAW-SUCRALOSE', 0.02),
                ('PACK-JAR-2KG', 1),
                ('PACK-LABEL', 1),
                ('PACK-SCOOP', 1),
            ]
        },
        {
            'name': 'Mass Gainer –í–∞–Ω–∏–ª—å 3–∫–≥',
            'product_code': 'FIN-GAINER-VAN-3KG',
            'components': [
                ('RAW-WHEY-80', 0.9),       # 30% –±–µ–ª–∫–∞
                ('RAW-MALTO', 1.5),         # 50% —É–≥–ª–µ–≤–æ–¥–æ–≤
                ('RAW-DEXTROSE', 0.55),     # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã
                ('RAW-VITAMIN', 0.005),     # –í–∏—Ç–∞–º–∏–Ω—ã
                ('RAW-FLAV-VAN', 0.04),
                ('RAW-SUCRALOSE', 0.005),
                ('PACK-JAR-3KG', 1),
                ('PACK-LABEL', 1),
                ('PACK-SCOOP', 1),
            ]
        },
        {
            'name': 'BCAA Powder 300–≥',
            'product_code': 'FIN-BCAA-300G',
            'components': [
                ('RAW-BCAA', 0.295),
                ('RAW-FLAV-VAN', 0.003),
                ('RAW-SUCRALOSE', 0.002),
                ('PACK-JAR-300G', 1),
                ('PACK-LABEL', 1),
                ('PACK-SCOOP', 1),
            ]
        },
        {
            'name': 'Creatine Monohydrate 500–≥',
            'product_code': 'FIN-CREATINE-500G',
            'components': [
                ('RAW-CREATINE', 0.5),
                ('PACK-JAR-500G', 1),
                ('PACK-LABEL', 1),
                ('PACK-SCOOP', 1),
            ]
        },
    ]
    
    for bom_data in boms:
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–æ–¥—É–∫—Ç–∞
            product_id = get_product_id(uid, models, bom_data['product_code'])
            
            if not product_id:
                print(f"  ‚ö†Ô∏è –ü—Ä–æ–¥—É–∫—Ç {bom_data['product_code']} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ BoM
            existing = models.execute_kw(
                DB_NAME, uid, PASSWORD,
                'mrp.bom', 'search',
                [[('product_id', '=', product_id)]]
            )
            
            if existing:
                print(f"  ‚ÑπÔ∏è –†–µ—Ü–µ–ø—Ç—É—Ä–∞ –¥–ª—è {bom_data['name']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                continue
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            bom_lines = []
            for comp_code, qty in bom_data['components']:
                comp_id = get_product_id(uid, models, comp_code)
                if comp_id:
                    bom_lines.append((0, 0, {
                        'product_id': comp_id,
                        'product_qty': qty
                    }))
            
            # –°–æ–∑–¥–∞–µ–º BoM
            bom_id = models.execute_kw(
                DB_NAME, uid, PASSWORD,
                'mrp.bom', 'create',
                [{
                    'product_tmpl_id': models.execute_kw(
                        DB_NAME, uid, PASSWORD,
                        'product.product', 'read',
                        [product_id, ['product_tmpl_id']]
                    )[0]['product_tmpl_id'][0],
                    'product_id': product_id,
                    'product_qty': 1,
                    'type': 'normal',
                    'bom_line_ids': bom_lines
                }]
            )
            
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ—Ü–µ–ø—Ç—É—Ä–∞: {bom_data['name']}")
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç—É—Ä—ã {bom_data['name']}: {e}")

def create_work_centers(uid, models):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö —Ü–µ–Ω—Ç—Ä–æ–≤"""
    print("\nüè≠ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö —Ü–µ–Ω—Ç—Ä–æ–≤...")
    
    work_centers = [
        {
            'name': '–£—á–∞—Å—Ç–æ–∫ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è',
            'code': 'WC-WEIGH',
            'capacity': 2,
            'time_efficiency': 100,
            'costs_hour': 500,
        },
        {
            'name': '–£—á–∞—Å—Ç–æ–∫ —Å–º–µ—à–∏–≤–∞–Ω–∏—è',
            'code': 'WC-MIX',
            'capacity': 1,
            'time_efficiency': 95,
            'costs_hour': 800,
        },
        {
            'name': '–£—á–∞—Å—Ç–æ–∫ —Ñ–∞—Å–æ–≤–∫–∏',
            'code': 'WC-PACK',
            'capacity': 3,
            'time_efficiency': 98,
            'costs_hour': 600,
        },
        {
            'name': '–£—á–∞—Å—Ç–æ–∫ —É–ø–∞–∫–æ–≤–∫–∏',
            'code': 'WC-LABEL',
            'capacity': 2,
            'time_efficiency': 99,
            'costs_hour': 400,
        },
        {
            'name': '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞',
            'code': 'WC-QC',
            'capacity': 1,
            'time_efficiency': 100,
            'costs_hour': 1000,
        },
    ]
    
    for wc_data in work_centers:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
            existing = models.execute_kw(
                DB_NAME, uid, PASSWORD,
                'mrp.workcenter', 'search',
                [[('code', '=', wc_data['code'])]]
            )
            
            if not existing:
                wc_id = models.execute_kw(
                    DB_NAME, uid, PASSWORD,
                    'mrp.workcenter', 'create',
                    [wc_data]
                )
                print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω —Ä–∞–±–æ—á–∏–π —Ü–µ–Ω—Ç—Ä: {wc_data['name']}")
            else:
                print(f"  ‚ÑπÔ∏è –†–∞–±–æ—á–∏–π —Ü–µ–Ω—Ç—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {wc_data['name']}")
                
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {wc_data['name']}: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 60)
    print("üöÄ –°–û–ó–î–ê–ù–ò–ï –ü–†–û–î–£–ö–¢–û–í –ò –†–ï–¶–ï–ü–¢–£–†")
    print("=" * 60)
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Odoo
    uid, models = connect_to_odoo()
    
    if not uid:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Odoo")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á–∏–µ —Ü–µ–Ω—Ç—Ä—ã
    create_work_centers(uid, models)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
    materials = create_raw_materials(uid, models)
    packaging = create_packaging_materials(uid, models)
    products = create_finished_products(uid, models)
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—É—Ä—ã
    create_bom(uid, models, materials, packaging, products)
    
    print("\n" + "=" * 60)
    print("‚úÖ –°–û–ó–î–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print("=" * 60)
    print("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"  ‚Ä¢ –°–æ–∑–¥–∞–Ω–æ —Å—ã—Ä—å–µ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {len(materials)}")
    print(f"  ‚Ä¢ –°–æ–∑–¥–∞–Ω–æ —É–ø–∞–∫–æ–≤–æ—á–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {len(packaging)}")
    print(f"  ‚Ä¢ –°–æ–∑–¥–∞–Ω–æ –≥–æ—Ç–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {len(products)}")
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ Odoo")
    print("2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞")
    print("3. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑")
    print("4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ—á–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞")

if __name__ == "__main__":
    main()
