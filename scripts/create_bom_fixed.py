#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç—É—Ä (BOM) –∏ —Ä–∞–±–æ—á–∏—Ö —Ü–µ–Ω—Ç—Ä–æ–≤ - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
"""

import xmlrpc.client
import ssl

ODOO_URL = "https://odoosportspitproject-production.up.railway.app"
DB_NAME = "odoo_sportpit"
LOGIN = "danila@usafitandjoy.com"
PASSWORD = "admin123"

def create_bom_and_workcenters():
    ssl_context = ssl.create_default_context()
    ssl_context.check_hostname = False
    ssl_context.verify_mode = ssl.CERT_NONE
    
    try:
        common = xmlrpc.client.ServerProxy(f'{ODOO_URL}/xmlrpc/2/common', context=ssl_context)
        uid = common.authenticate(DB_NAME, LOGIN, PASSWORD, {})
        
        if not uid:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏")
            return False
            
        print(f"‚úÖ –í–æ—à–µ–ª –∫–∞–∫ {LOGIN}")
        models = xmlrpc.client.ServerProxy(f'{ODOO_URL}/xmlrpc/2/object', context=ssl_context)
        
        # –°–û–ó–î–ê–ù–ò–ï –†–ê–ë–û–ß–ò–• –¶–ï–ù–¢–†–û–í (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        print("\nüè≠ –°–û–ó–î–ê–ù–ò–ï –†–ê–ë–û–ß–ò–• –¶–ï–ù–¢–†–û–í:")
        
        work_centers = [
            {'name': '–£—á–∞—Å—Ç–æ–∫ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è', 'code': 'WC-WEIGH', 'time_efficiency': 100, 'costs_hour': 500},
            {'name': '–£—á–∞—Å—Ç–æ–∫ —Å–º–µ—à–∏–≤–∞–Ω–∏—è', 'code': 'WC-MIX', 'time_efficiency': 95, 'costs_hour': 800},
            {'name': '–£—á–∞—Å—Ç–æ–∫ —Ñ–∞—Å–æ–≤–∫–∏', 'code': 'WC-PACK', 'time_efficiency': 98, 'costs_hour': 600},
            {'name': '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞', 'code': 'WC-QC', 'time_efficiency': 100, 'costs_hour': 1000},
        ]
        
        wc_ids = {}
        for wc in work_centers:
            try:
                existing = models.execute_kw(
                    DB_NAME, uid, PASSWORD,
                    'mrp.workcenter', 'search',
                    [[('code', '=', wc['code'])]]
                )
                
                if not existing:
                    wc_id = models.execute_kw(
                        DB_NAME, uid, PASSWORD,
                        'mrp.workcenter', 'create', [{
                            'name': wc['name'],
                            'code': wc['code'],
                            'costs_hour': wc['costs_hour']
                        }]
                    )
                    wc_ids[wc['code']] = wc_id
                    print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω: {wc['name']}")
                else:
                    wc_ids[wc['code']] = existing[0]
                    print(f"  ‚ÑπÔ∏è –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {wc['name']}")
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {wc['name']}: {str(e)[:50]}")
        
        # –ü–û–õ–£–ß–ï–ù–ò–ï ID –ü–†–û–î–£–ö–¢–û–í
        print("\nüì¶ –ü–û–õ–£–ß–ï–ù–ò–ï –ü–†–û–î–£–ö–¢–û–í:")
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ –∫–æ–¥—É
        def get_product_id(code):
            prod = models.execute_kw(
                DB_NAME, uid, PASSWORD,
                'product.product', 'search',
                [[('default_code', '=', code)]]
            )
            return prod[0] if prod else None
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ (–µ—Å–ª–∏ –∫–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
        def get_product_by_name(name):
            prod = models.execute_kw(
                DB_NAME, uid, PASSWORD,
                'product.product', 'search',
                [[('name', 'ilike', name)]]
            )
            return prod[0] if prod else None
        
        products = {}
        
        # –°—ã—Ä—å–µ
        raw_mapping = {
            'RAW-WHEY': '–°—ã–≤–æ—Ä–æ—Ç–æ—á–Ω—ã–π –ø—Ä–æ—Ç–µ–∏–Ω',
            'RAW-MALTO': '–ú–∞–ª—å—Ç–æ–¥–µ–∫—Å—Ç—Ä–∏–Ω',
            'RAW-CREAT': '–ö—Ä–µ–∞—Ç–∏–Ω',
            'RAW-BCAA': 'BCAA',
            'RAW-VANIL': '–ê—Ä–æ–º–∞—Ç–∏–∑–∞—Ç–æ—Ä –í–∞–Ω–∏–ª—å'
        }
        
        for code, name in raw_mapping.items():
            prod_id = get_product_id(code) or get_product_by_name(name)
            if prod_id:
                products[code] = prod_id
                print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω: {name}")
            else:
                print(f"  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω: {name}")
        
        # –ì–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è
        finished_mapping = {
            'FIN-WHEY-2KG': 'Whey Protein –í–∞–Ω–∏–ª—å 2–∫–≥',
            'FIN-GAIN-3KG': 'Mass Gainer 3–∫–≥',
            'FIN-BCAA-300': 'BCAA 300–≥',
            'FIN-CREAT-500': 'Creatine 500–≥'
        }
        
        for code, name in finished_mapping.items():
            prod_id = get_product_id(code) or get_product_by_name(name)
            if prod_id:
                products[code] = prod_id
                print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω: {name}")
            else:
                print(f"  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω: {name}")
        
        # –°–û–ó–î–ê–ù–ò–ï –£–ü–ê–ö–û–í–û–ß–ù–´–• –ú–ê–¢–ï–†–ò–ê–õ–û–í
        print("\nüì¶ –°–û–ó–î–ê–ù–ò–ï –£–ü–ê–ö–û–í–ö–ò:")
        
        packaging = [
            {'name': '–ë–∞–Ω–∫–∞ –ø–ª–∞—Å—Ç–∏–∫–æ–≤–∞—è 2–∫–≥', 'default_code': 'PACK-2KG', 'standard_price': 45},
            {'name': '–ë–∞–Ω–∫–∞ –ø–ª–∞—Å—Ç–∏–∫–æ–≤–∞—è 3–∫–≥', 'default_code': 'PACK-3KG', 'standard_price': 55},
            {'name': '–ë–∞–Ω–∫–∞ –ø–ª–∞—Å—Ç–∏–∫–æ–≤–∞—è 300–≥', 'default_code': 'PACK-300G', 'standard_price': 25},
            {'name': '–ë–∞–Ω–∫–∞ –ø–ª–∞—Å—Ç–∏–∫–æ–≤–∞—è 500–≥', 'default_code': 'PACK-500G', 'standard_price': 30},
            {'name': '–≠—Ç–∏–∫–µ—Ç–∫–∞ —Å–∞–º–æ–∫–ª–µ—è—â–∞—è—Å—è', 'default_code': 'PACK-LABEL', 'standard_price': 3},
            {'name': '–ú–µ—Ä–Ω–∞—è –ª–æ–∂–∫–∞ 30–º–ª', 'default_code': 'PACK-SCOOP', 'standard_price': 5},
        ]
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –°—ã—Ä—å–µ
        raw_cat_ids = models.execute_kw(
            DB_NAME, uid, PASSWORD,
            'product.category', 'search',
            [[('name', '=', '–°—ã—Ä—å–µ')]]
        )
        
        if not raw_cat_ids:
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            raw_cat_id = models.execute_kw(
                DB_NAME, uid, PASSWORD,
                'product.category', 'create',
                [{'name': '–°—ã—Ä—å–µ'}]
            )
        else:
            raw_cat_id = raw_cat_ids[0]
        
        for pack in packaging:
            try:
                existing = models.execute_kw(
                    DB_NAME, uid, PASSWORD,
                    'product.product', 'search',
                    [[('default_code', '=', pack['default_code'])]]
                )
                
                if not existing:
                    pack_data = {
                        'name': pack['name'],
                        'default_code': pack['default_code'],
                        'standard_price': pack['standard_price'],
                        'type': 'product',
                        'categ_id': raw_cat_id,
                        'uom_id': 1,  # —à—Ç—É–∫–∏
                        'purchase_ok': True,
                        'sale_ok': False
                    }
                    
                    pack_id = models.execute_kw(
                        DB_NAME, uid, PASSWORD,
                        'product.product', 'create', [pack_data]
                    )
                    products[pack['default_code']] = pack_id
                    print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞: {pack['name']}")
                else:
                    products[pack['default_code']] = existing[0]
                    print(f"  ‚ÑπÔ∏è –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {pack['name']}")
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {pack['name']}: {str(e)[:50]}")
        
        # –°–û–ó–î–ê–ù–ò–ï –†–ï–¶–ï–ü–¢–£–† (BOM)
        print("\nüìã –°–û–ó–î–ê–ù–ò–ï –†–ï–¶–ï–ü–¢–£–† (BOM):")
        
        boms = [
            {
                'name': '–†–µ—Ü–µ–ø—Ç—É—Ä–∞: Whey Protein –í–∞–Ω–∏–ª—å 2–∫–≥',
                'product_code': 'FIN-WHEY-2KG',
                'product_qty': 1,
                'lines': [
                    ('RAW-WHEY', 1.95),      # –°—ã–≤–æ—Ä–æ—Ç–æ—á–Ω—ã–π –ø—Ä–æ—Ç–µ–∏–Ω
                    ('RAW-VANIL', 0.03),     # –ê—Ä–æ–º–∞—Ç–∏–∑–∞—Ç–æ—Ä
                    ('PACK-2KG', 1),         # –ë–∞–Ω–∫–∞
                    ('PACK-LABEL', 1),       # –≠—Ç–∏–∫–µ—Ç–∫–∞
                    ('PACK-SCOOP', 1),       # –õ–æ–∂–∫–∞
                ]
            },
            {
                'name': '–†–µ—Ü–µ–ø—Ç—É—Ä–∞: Mass Gainer 3–∫–≥',
                'product_code': 'FIN-GAIN-3KG',
                'product_qty': 1,
                'lines': [
                    ('RAW-WHEY', 0.9),       # –ü—Ä–æ—Ç–µ–∏–Ω
                    ('RAW-MALTO', 2.0),      # –£–≥–ª–µ–≤–æ–¥—ã
                    ('RAW-VANIL', 0.05),     # –ê—Ä–æ–º–∞—Ç–∏–∑–∞—Ç–æ—Ä
                    ('PACK-3KG', 1),         # –ë–∞–Ω–∫–∞
                    ('PACK-LABEL', 1),       # –≠—Ç–∏–∫–µ—Ç–∫–∞
                    ('PACK-SCOOP', 1),       # –õ–æ–∂–∫–∞
                ]
            },
            {
                'name': '–†–µ—Ü–µ–ø—Ç—É—Ä–∞: BCAA 300–≥',
                'product_code': 'FIN-BCAA-300',
                'product_qty': 1,
                'lines': [
                    ('RAW-BCAA', 0.295),     # BCAA
                    ('RAW-VANIL', 0.005),    # –ê—Ä–æ–º–∞—Ç–∏–∑–∞—Ç–æ—Ä
                    ('PACK-300G', 1),        # –ë–∞–Ω–∫–∞
                    ('PACK-LABEL', 1),       # –≠—Ç–∏–∫–µ—Ç–∫–∞
                    ('PACK-SCOOP', 1),       # –õ–æ–∂–∫–∞
                ]
            },
            {
                'name': '–†–µ—Ü–µ–ø—Ç—É—Ä–∞: Creatine 500–≥',
                'product_code': 'FIN-CREAT-500',
                'product_qty': 1,
                'lines': [
                    ('RAW-CREAT', 0.5),      # –ö—Ä–µ–∞—Ç–∏–Ω
                    ('PACK-500G', 1),        # –ë–∞–Ω–∫–∞
                    ('PACK-LABEL', 1),       # –≠—Ç–∏–∫–µ—Ç–∫–∞
                    ('PACK-SCOOP', 1),       # –õ–æ–∂–∫–∞
                ]
            }
        ]
        
        created_boms = 0
        for bom_data in boms:
            product_id = products.get(bom_data['product_code'])
            
            if not product_id:
                print(f"  ‚ö†Ô∏è –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {bom_data['name']}")
                continue
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ BOM
                existing = models.execute_kw(
                    DB_NAME, uid, PASSWORD,
                    'mrp.bom', 'search',
                    [[('product_id', '=', product_id)]]
                )
                
                if existing:
                    print(f"  ‚ÑπÔ∏è –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {bom_data['name']}")
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º product_tmpl_id
                product = models.execute_kw(
                    DB_NAME, uid, PASSWORD,
                    'product.product', 'read',
                    [product_id, ['product_tmpl_id']]
                )
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ª–∏–Ω–∏–∏ BOM (—Ç–æ–ª—å–∫–æ —Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–π–¥–µ–Ω—ã)
                bom_lines = []
                missing_components = []
                
                for comp_code, qty in bom_data['lines']:
                    comp_id = products.get(comp_code)
                    if comp_id:
                        bom_lines.append((0, 0, {
                            'product_id': comp_id,
                            'product_qty': qty
                        }))
                    else:
                        missing_components.append(comp_code)
                
                if missing_components:
                    print(f"  ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è {bom_data['name']}: {missing_components}")
                
                if bom_lines:  # –°–æ–∑–¥–∞–µ–º BOM —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
                    bom_id = models.execute_kw(
                        DB_NAME, uid, PASSWORD,
                        'mrp.bom', 'create',
                        [{
                            'product_tmpl_id': product[0]['product_tmpl_id'][0],
                            'product_id': product_id,
                            'product_qty': bom_data['product_qty'],
                            'type': 'normal',
                            'bom_line_ids': bom_lines
                        }]
                    )
                    print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞: {bom_data['name']} ({len(bom_lines)} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤)")
                    created_boms += 1
                    
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {bom_data['name']}: {str(e)[:100]}")
        
        # –ò–¢–û–ì–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê
        print("\n" + "="*60)
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—É—Ä—ã
        all_boms = models.execute_kw(
            DB_NAME, uid, PASSWORD,
            'mrp.bom', 'search_read',
            [[]],
            {'fields': ['display_name', 'product_id', 'bom_line_ids'], 'limit': 20}
        )
        
        print(f"\n‚úÖ –í—Å–µ–≥–æ —Ä–µ—Ü–µ–ø—Ç—É—Ä –≤ —Å–∏—Å—Ç–µ–º–µ: {len(all_boms)}")
        for bom in all_boms:
            line_count = len(bom['bom_line_ids']) if bom['bom_line_ids'] else 0
            print(f"  ‚Ä¢ {bom['display_name']} ({line_count} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–∏–µ —Ü–µ–Ω—Ç—Ä—ã
        all_wc = models.execute_kw(
            DB_NAME, uid, PASSWORD,
            'mrp.workcenter', 'search_read',
            [[]],
            {'fields': ['name', 'code']}
        )
        
        print(f"\n‚úÖ –†–∞–±–æ—á–∏—Ö —Ü–µ–Ω—Ç—Ä–æ–≤: {len(all_wc)}")
        for wc in all_wc:
            print(f"  ‚Ä¢ {wc['name']} ({wc['code']})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã
        all_products = models.execute_kw(
            DB_NAME, uid, PASSWORD,
            'product.product', 'search_read',
            [[('type', '=', 'product')]],
            {'fields': ['name', 'default_code'], 'limit': 50}
        )
        
        print(f"\n‚úÖ –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {len(all_products)}")
        
        print("\n" + "="*60)
        print("‚úÖ –°–ò–°–¢–ï–ú–ê –ü–†–û–ò–ó–í–û–î–°–¢–í–ê –ù–ê–°–¢–†–û–ï–ù–ê!")
        print("="*60)
        print("\nüéØ –¢–µ–ø–µ—Ä—å –≤ Odoo –º–æ–∂–Ω–æ:")
        print("1. –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ (–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ ‚Üí –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã)")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞")
        print("3. –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ —Å–∫–ª–∞–¥—É")
        print("4. –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("="*60)
    print("üè≠ –°–û–ó–î–ê–ù–ò–ï –†–ï–¶–ï–ü–¢–£–† –ò –ù–ê–°–¢–†–û–ô–ö–ê –ü–†–û–ò–ó–í–û–î–°–¢–í–ê")
    print("="*60)
    
    create_bom_and_workcenters()
