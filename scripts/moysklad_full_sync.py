#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ú–æ–π–°–∫–ª–∞–¥ –≤ Odoo
–í–∫–ª—é—á–∞–µ—Ç: —Ç–æ–≤–∞—Ä—ã, –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤, –æ—Å—Ç–∞—Ç–∫–∏, —Ü–µ–Ω—ã, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
"""

import requests
import xmlrpc.client
import ssl
import json
from datetime import datetime

# === –ù–ê–°–¢–†–û–ô–ö–ò –ú–û–ô–°–ö–õ–ê–î ===
MOYSKLAD_TOKEN = "7bbede5c5ac9c28ddf7995042fcbbe1fecb274e1"
MOYSKLAD_BASE_URL = "https://api.moysklad.ru/api/remap/1.2"

# === –ù–ê–°–¢–†–û–ô–ö–ò ODOO ===
ODOO_URL = "https://odoosportspitproject-production.up.railway.app"
DB_NAME = "odoo_sportpit"
ODOO_LOGIN = "danila@usafitandjoy.com"
ODOO_PASSWORD = "admin123"

class MoySkladFullSync:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–∏—Å—Ç–µ–º–∞–º...")
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Odoo
        ssl_context = ssl.create_default_context()
        ssl_context.check_hostname = False
        ssl_context.verify_mode = ssl.CERT_NONE
        
        self.odoo_common = xmlrpc.client.ServerProxy(f'{ODOO_URL}/xmlrpc/2/common', context=ssl_context)
        self.odoo_uid = self.odoo_common.authenticate(DB_NAME, ODOO_LOGIN, ODOO_PASSWORD, {})
        
        if self.odoo_uid:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Odoo")
            self.odoo_models = xmlrpc.client.ServerProxy(f'{ODOO_URL}/xmlrpc/2/object', context=ssl_context)
        else:
            raise Exception("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Odoo")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –ú–æ–π–°–∫–ª–∞–¥
        self.moysklad_headers = {
            'Authorization': f'Bearer {MOYSKLAD_TOKEN}',
            'Content-Type': 'application/json'
        }
        
        # –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ ID
        self.category_map = {}  # –ú–æ–π–°–∫–ª–∞–¥ ID -> Odoo ID
        self.partner_map = {}   # –ú–æ–π–°–∫–ª–∞–¥ ID -> Odoo ID
        self.product_map = {}   # –ú–æ–π–°–∫–ª–∞–¥ ID -> Odoo ID
        self.warehouse_map = {}  # –ú–æ–π–°–∫–ª–∞–¥ ID -> Odoo ID
        
    def test_connection(self):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ú–æ–π–°–∫–ª–∞–¥"""
        try:
            response = requests.get(
                f"{MOYSKLAD_BASE_URL}/context/companysettings",
                headers=self.moysklad_headers
            )
            
            if response.status_code == 200:
                print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –ú–æ–π–°–∫–ª–∞–¥")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ú–æ–π–°–∫–ª–∞–¥: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def get_all_data_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤—Å–µ–º –¥–∞–Ω–Ω—ã–º –≤ –ú–æ–π–°–∫–ª–∞–¥"""
        print("\nüìä –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –í –ú–û–ô–°–ö–õ–ê–î:")
        print("="*50)
        
        entities = [
            ('product', '–¢–æ–≤–∞—Ä—ã'),
            ('variant', '–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏'),
            ('counterparty', '–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã'),
            ('organization', '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏'),
            ('store', '–°–∫–ª–∞–¥—ã'),
            ('productfolder', '–ì—Ä—É–ø–ø—ã —Ç–æ–≤–∞—Ä–æ–≤'),
            ('supply', '–ü—Ä–∏–µ–º–∫–∏'),
            ('customerorder', '–ó–∞–∫–∞–∑—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π'),
            ('purchaseorder', '–ó–∞–∫–∞–∑—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º'),
            ('invoicein', '–°—á–µ—Ç–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤'),
            ('invoiceout', '–°—á–µ—Ç–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π'),
        ]
        
        stats = {}
        for entity, name in entities:
            try:
                response = requests.get(
                    f"{MOYSKLAD_BASE_URL}/entity/{entity}",
                    headers=self.moysklad_headers,
                    params={'limit': 1}
                )
                
                if response.status_code == 200:
                    data = response.json()
                    count = data.get('meta', {}).get('size', 0)
                    stats[entity] = count
                    if count > 0:
                        print(f"  ‚Ä¢ {name:20} : {count:6} –∑–∞–ø–∏—Å–µ–π")
            except:
                pass
        
        return stats
    
    def sync_product_folders(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≥—Ä—É–ø–ø —Ç–æ–≤–∞—Ä–æ–≤ (–∫–∞—Ç–µ–≥–æ—Ä–∏–π)"""
        print("\nüìÅ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ö–ê–¢–ï–ì–û–†–ò–ô –¢–û–í–ê–†–û–í:")
        print("-"*40)
        
        response = requests.get(
            f"{MOYSKLAD_BASE_URL}/entity/productfolder",
            headers=self.moysklad_headers,
            params={'limit': 1000}
        )
        
        if response.status_code != 200:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            return
        
        folders = response.json().get('rows', [])
        
        for folder in folders:
            ms_id = folder['id']
            name = folder['name']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
            existing = self.odoo_models.execute_kw(
                DB_NAME, self.odoo_uid, ODOO_PASSWORD,
                'product.category', 'search',
                [[('name', '=', name)]]
            )
            
            if existing:
                cat_id = existing[0]
                print(f"  ‚ÑπÔ∏è –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {name}")
            else:
                # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                parent_id = False
                if folder.get('productFolder'):
                    parent_ms_id = folder['productFolder']['meta']['href'].split('/')[-1]
                    parent_id = self.category_map.get(parent_ms_id)
                
                cat_id = self.odoo_models.execute_kw(
                    DB_NAME, self.odoo_uid, ODOO_PASSWORD,
                    'product.category', 'create',
                    [{
                        'name': name,
                        'parent_id': parent_id if parent_id else False
                    }]
                )
                print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞: {name}")
            
            self.category_map[ms_id] = cat_id
        
        print(f"\n  –ò—Ç–æ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(self.category_map)}")
    
    def sync_counterparties(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ (–ø–æ—Å—Ç–∞–≤—â–∏–∫–∏ –∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏)"""
        print("\nüë• –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ö–û–ù–¢–†–ê–ì–ï–ù–¢–û–í:")
        print("-"*40)
        
        offset = 0
        limit = 100
        total_created = 0
        
        while True:
            response = requests.get(
                f"{MOYSKLAD_BASE_URL}/entity/counterparty",
                headers=self.moysklad_headers,
                params={
                    'limit': limit,
                    'offset': offset,
                    'expand': 'tags'
                }
            )
            
            if response.status_code != 200:
                break
            
            data = response.json()
            counterparties = data.get('rows', [])
            
            if not counterparties:
                break
            
            for cp in counterparties:
                ms_id = cp['id']
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                partner_data = {
                    'name': cp.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                    'is_company': cp.get('companyType') == 'legal',
                    'supplier_rank': 1 if 'supplier' in str(cp.get('tags', [])).lower() else 0,
                    'customer_rank': 1 if 'customer' in str(cp.get('tags', [])).lower() or '–ø–æ–∫—É–ø–∞—Ç–µ–ª—å' in str(cp.get('tags', [])).lower() else 1,
                    'phone': cp.get('phone', ''),
                    'email': cp.get('email', ''),
                    'website': cp.get('site', ''),
                    'comment': cp.get('description', ''),
                    'vat': cp.get('inn', ''),
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –µ—Å–ª–∏ –µ—Å—Ç—å
                if cp.get('actualAddress'):
                    partner_data['street'] = cp['actualAddress']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ –ò–ù–ù –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é
                domain = []
                if partner_data['vat']:
                    domain = [('vat', '=', partner_data['vat'])]
                else:
                    domain = [('name', '=', partner_data['name'])]
                
                existing = self.odoo_models.execute_kw(
                    DB_NAME, self.odoo_uid, ODOO_PASSWORD,
                    'res.partner', 'search', [domain]
                )
                
                if existing:
                    partner_id = existing[0]
                    # –û–±–Ω–æ–≤–ª—è–µ–º
                    self.odoo_models.execute_kw(
                        DB_NAME, self.odoo_uid, ODOO_PASSWORD,
                        'res.partner', 'write',
                        [partner_id, partner_data]
                    )
                    print(f"  üìù –û–±–Ω–æ–≤–ª–µ–Ω: {partner_data['name']}")
                else:
                    # –°–æ–∑–¥–∞–µ–º
                    partner_id = self.odoo_models.execute_kw(
                        DB_NAME, self.odoo_uid, ODOO_PASSWORD,
                        'res.partner', 'create', [partner_data]
                    )
                    print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω: {partner_data['name']}")
                    total_created += 1
                
                self.partner_map[ms_id] = partner_id
            
            offset += limit
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞
            if offset >= 200:
                print("\n  ‚ö†Ô∏è –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ 200 –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)")
                break
        
        print(f"\n  –ò—Ç–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤: {len(self.partner_map)}")
        print(f"  –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö: {total_created}")
    
    def sync_warehouses(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–∫–ª–∞–¥–æ–≤"""
        print("\nüè≠ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –°–ö–õ–ê–î–û–í:")
        print("-"*40)
        
        response = requests.get(
            f"{MOYSKLAD_BASE_URL}/entity/store",
            headers=self.moysklad_headers
        )
        
        if response.status_code != 200:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫–ª–∞–¥—ã")
            return
        
        stores = response.json().get('rows', [])
        
        for store in stores:
            ms_id = store['id']
            name = store['name']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
            existing = self.odoo_models.execute_kw(
                DB_NAME, self.odoo_uid, ODOO_PASSWORD,
                'stock.warehouse', 'search',
                [[('name', '=', name)]]
            )
            
            if existing:
                wh_id = existing[0]
                print(f"  ‚ÑπÔ∏è –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {name}")
            else:
                # –°–æ–∑–¥–∞–µ–º —Å–∫–ª–∞–¥
                wh_data = {
                    'name': name,
                    'code': store.get('code', name[:5].upper())
                }
                
                try:
                    wh_id = self.odoo_models.execute_kw(
                        DB_NAME, self.odoo_uid, ODOO_PASSWORD,
                        'stock.warehouse', 'create', [wh_data]
                    )
                    print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫–ª–∞–¥: {name}")
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫–ª–∞–¥–∞ {name}: {str(e)[:50]}")
                    continue
            
            self.warehouse_map[ms_id] = wh_id
        
        print(f"\n  –ò—Ç–æ–≥–æ —Å–∫–ª–∞–¥–æ–≤: {len(self.warehouse_map)}")
    
    def sync_products(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤"""
        print("\nüì¶ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –¢–û–í–ê–†–û–í:")
        print("-"*40)
        
        offset = 0
        limit = 100
        total_created = 0
        total_updated = 0
        
        while True:
            response = requests.get(
                f"{MOYSKLAD_BASE_URL}/entity/product",
                headers=self.moysklad_headers,
                params={
                    'limit': limit,
                    'offset': offset,
                    'expand': 'productFolder,supplier,salePrices,buyPrice,barcodes,images'
                }
            )
            
            if response.status_code != 200:
                break
            
            data = response.json()
            products = data.get('rows', [])
            
            if not products:
                break
            
            for product in products:
                ms_id = product['id']
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                category_id = 1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if product.get('productFolder'):
                    folder_id = product['productFolder']['meta']['href'].split('/')[-1]
                    category_id = self.category_map.get(folder_id, 1)
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                supplier_id = False
                if product.get('supplier'):
                    supplier_ms_id = product['supplier']['meta']['href'].split('/')[-1]
                    supplier_id = self.partner_map.get(supplier_ms_id)
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
                product_data = {
                    'name': product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                    'default_code': product.get('code', product.get('article', '')),
                    'barcode': None,
                    'type': 'product',
                    'categ_id': category_id,
                    'sale_ok': not product.get('archived', False),
                    'purchase_ok': not product.get('archived', False),
                    'list_price': 0,
                    'standard_price': 0,
                    'description': product.get('description', ''),
                    'weight': product.get('weight', 0) / 1000 if product.get('weight') else 0,  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –∫–≥
                    'volume': product.get('volume', 0) / 1000000 if product.get('volume') else 0,  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –º¬≥
                }
                
                # –®—Ç—Ä–∏—Ö–∫–æ–¥—ã
                if product.get('barcodes'):
                    barcodes = product['barcodes']
                    if barcodes and len(barcodes) > 0:
                        product_data['barcode'] = barcodes[0].get('ean13') or barcodes[0].get('ean8')
                
                # –¶–µ–Ω—ã
                if product.get('salePrices'):
                    for price in product['salePrices']:
                        if price.get('priceType', {}).get('name') in ['–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏', '–†–æ–∑–Ω–∏—á–Ω–∞—è —Ü–µ–Ω–∞']:
                            product_data['list_price'] = price.get('value', 0) / 100
                            break
                
                if product.get('buyPrice'):
                    product_data['standard_price'] = product['buyPrice'].get('value', 0) / 100
                
                # –ù–î–°
                if product.get('vat'):
                    product_data['taxes_id'] = [(6, 0, [])]  # –û—á–∏—â–∞–µ–º –Ω–∞–ª–æ–≥–∏, –ø–æ—Ç–æ–º –¥–æ–±–∞–≤–∏–º
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
                existing = []
                if product_data['default_code']:
                    existing = self.odoo_models.execute_kw(
                        DB_NAME, self.odoo_uid, ODOO_PASSWORD,
                        'product.product', 'search',
                        [[('default_code', '=', product_data['default_code'])]]
                    )
                
                if not existing and product_data['barcode']:
                    existing = self.odoo_models.execute_kw(
                        DB_NAME, self.odoo_uid, ODOO_PASSWORD,
                        'product.product', 'search',
                        [[('barcode', '=', product_data['barcode'])]]
                    )
                
                try:
                    if existing:
                        # –û–±–Ω–æ–≤–ª—è–µ–º
                        self.odoo_models.execute_kw(
                            DB_NAME, self.odoo_uid, ODOO_PASSWORD,
                            'product.product', 'write',
                            [existing[0], product_data]
                        )
                        product_id = existing[0]
                        total_updated += 1
                        print(f"  üìù –û–±–Ω–æ–≤–ª–µ–Ω: {product_data['name']}")
                    else:
                        # –°–æ–∑–¥–∞–µ–º
                        product_id = self.odoo_models.execute_kw(
                            DB_NAME, self.odoo_uid, ODOO_PASSWORD,
                            'product.product', 'create', [product_data]
                        )
                        total_created += 1
                        print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω: {product_data['name']}")
                    
                    self.product_map[ms_id] = product_id
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                    if supplier_id and product_id:
                        try:
                            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ —Ç–æ–≤–∞—Ä–∞
                            self.odoo_models.execute_kw(
                                DB_NAME, self.odoo_uid, ODOO_PASSWORD,
                                'product.supplierinfo', 'create',
                                [{
                                    'partner_id': supplier_id,
                                    'product_tmpl_id': self.odoo_models.execute_kw(
                                        DB_NAME, self.odoo_uid, ODOO_PASSWORD,
                                        'product.product', 'read',
                                        [product_id, ['product_tmpl_id']]
                                    )[0]['product_tmpl_id'][0],
                                    'price': product_data['standard_price'],
                                    'delay': 1,
                                }]
                            )
                        except:
                            pass
                    
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å —Ç–æ–≤–∞—Ä–æ–º {product_data['name']}: {str(e)[:50]}")
            
            offset += limit
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if offset % 500 == 0:
                print(f"\n  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {offset} —Ç–æ–≤–∞—Ä–æ–≤...")
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞
            if offset >= 1000:
                print("\n  ‚ö†Ô∏è –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ 1000 —Ç–æ–≤–∞—Ä–æ–≤ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)")
                break
        
        print(f"\n  –ò—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(self.product_map)}")
        print(f"  –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö: {total_created}")
        print(f"  –û–±–Ω–æ–≤–ª–µ–Ω–æ: {total_updated}")
    
    def sync_stock(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤"""
        print("\nüìä –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –û–°–¢–ê–¢–ö–û–í:")
        print("-"*40)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫–ª–∞–¥ Odoo
        main_warehouse = self.odoo_models.execute_kw(
            DB_NAME, self.odoo_uid, ODOO_PASSWORD,
            'stock.warehouse', 'search',
            [[], 0, 1]
        )
        
        if not main_warehouse:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Å–∫–ª–∞–¥ –≤ Odoo")
            return
        
        main_wh = self.odoo_models.execute_kw(
            DB_NAME, self.odoo_uid, ODOO_PASSWORD,
            'stock.warehouse', 'read',
            [main_warehouse[0], ['lot_stock_id']]
        )[0]
        
        main_location_id = main_wh['lot_stock_id'][0]
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –∏–∑ –ú–æ–π–°–∫–ª–∞–¥
        response = requests.get(
            f"{MOYSKLAD_BASE_URL}/report/stock/all",
            headers=self.moysklad_headers,
            params={'limit': 1000}
        )
        
        if response.status_code != 200:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏")
            return
        
        stocks = response.json().get('rows', [])
        updated_count = 0
        
        print(f"  –ù–∞–π–¥–µ–Ω–æ –æ—Å—Ç–∞—Ç–∫–æ–≤: {len(stocks)}")
        
        for stock in stocks[:100]:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞
            # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –≤ Odoo
            ms_product_id = stock['meta']['href'].split('/')[-1]
            odoo_product_id = self.product_map.get(ms_product_id)
            
            if not odoo_product_id:
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
                if stock.get('code'):
                    existing = self.odoo_models.execute_kw(
                        DB_NAME, self.odoo_uid, ODOO_PASSWORD,
                        'product.product', 'search',
                        [[('default_code', '=', stock['code'])]]
                    )
                    if existing:
                        odoo_product_id = existing[0]
            
            if odoo_product_id:
                qty = stock.get('stock', 0)
                
                if qty > 0:
                    try:
                        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞
                        inventory_id = self.odoo_models.execute_kw(
                            DB_NAME, self.odoo_uid, ODOO_PASSWORD,
                            'stock.quant', 'create',
                            [{
                                'product_id': odoo_product_id,
                                'location_id': main_location_id,
                                'quantity': qty,
                            }]
                        )
                        updated_count += 1
                        print(f"    ‚úÖ {stock.get('name', '–¢–æ–≤–∞—Ä')}: {qty} —à—Ç")
                    except:
                        # –ï—Å–ª–∏ quant —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º
                        try:
                            existing_quant = self.odoo_models.execute_kw(
                                DB_NAME, self.odoo_uid, ODOO_PASSWORD,
                                'stock.quant', 'search',
                                [[
                                    ('product_id', '=', odoo_product_id),
                                    ('location_id', '=', main_location_id)
                                ]]
                            )
                            
                            if existing_quant:
                                self.odoo_models.execute_kw(
                                    DB_NAME, self.odoo_uid, ODOO_PASSWORD,
                                    'stock.quant', 'write',
                                    [existing_quant[0], {'quantity': qty}]
                                )
                                updated_count += 1
                        except Exception as e:
                            print(f"    ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞: {str(e)[:50]}")
        
        print(f"\n  –û–±–Ω–æ–≤–ª–µ–Ω–æ –æ—Å—Ç–∞—Ç–∫–æ–≤: {updated_count}")
    
    def run_full_sync(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        print("\n" + "="*60)
        print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò")
        print("="*60)
        
        if not self.test_connection():
            print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ú–æ–π–°–∫–ª–∞–¥")
            print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω API")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = self.get_all_data_stats()
        
        print("\n" + "="*60)
        print("üì• –ù–ê–ß–ê–õ–û –ò–ú–ü–û–†–¢–ê –î–ê–ù–ù–´–•")
        print("="*60)
        
        # –ü–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω!
        self.sync_product_folders()  # –°–Ω–∞—á–∞–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        self.sync_counterparties()   # –ü–æ—Ç–æ–º –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã
        self.sync_warehouses()       # –°–∫–ª–∞–¥—ã
        self.sync_products()         # –¢–æ–≤–∞—Ä—ã
        self.sync_stock()           # –û—Å—Ç–∞—Ç–∫–∏
        
        print("\n" + "="*60)
        print("‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("="*60)
        
        print("\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"  ‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(self.category_map)}")
        print(f"  ‚Ä¢ –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤: {len(self.partner_map)}")
        print(f"  ‚Ä¢ –°–∫–ª–∞–¥–æ–≤: {len(self.warehouse_map)}")
        print(f"  ‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤: {len(self.product_map)}")
        
        print("\nüéØ –ß–¢–û –î–ê–õ–¨–®–ï:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ Odoo")
        print("2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö")
        print("4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é")

def main():
    print("="*60)
    print("üîÑ –ü–û–õ–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ú–û–ô–°–ö–õ–ê–î ‚Üí ODOO")
    print("="*60)
    print("\n‚ö†Ô∏è –≠—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ –ú–æ–π–°–∫–ª–∞–¥:")
    print("  ‚Ä¢ –¢–æ–≤–∞—Ä—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    print("  ‚Ä¢ –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ (–ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π)")
    print("  ‚Ä¢ –°–∫–ª–∞–¥—ã")
    print("  ‚Ä¢ –û—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤")
    print("  ‚Ä¢ –¶–µ–Ω—ã")
    
    confirm = input("\n‚ùì –ù–∞—á–∞—Ç—å –∏–º–ø–æ—Ä—Ç? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
    
    if confirm in ['–¥–∞', 'yes', 'y', '–¥']:
        try:
            syncer = MoySkladFullSync()
            syncer.run_full_sync()
        except Exception as e:
            print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
    else:
        print("\n‚ùå –ò–º–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω")

if __name__ == "__main__":
    main()
