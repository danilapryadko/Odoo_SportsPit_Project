#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞ Odoo SportPit
–ê–≤—Ç–æ—Ä: Claude AI Assistant
–î–∞—Ç–∞: 09.08.2025
"""

import requests
import json
import sys
import time
from datetime import datetime
from urllib.parse import urljoin

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
ODOO_URL = "https://odoosportspitproject-production.up.railway.app"
RAILWAY_API_TOKEN = "e2a89410-8aeb-419c-8020-741fba8f9bf9"
RAILWAY_API_URL = "https://backboard.railway.app/graphql/v2"
PROJECT_ID = "daa4ac63-d597-4ba7-b10e-1baf84cbacad"
ENVIRONMENT_ID = "d312f78e-aea8-46ab-a1a6-0b20b9e94e74"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
class Colors:
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    BLUE = '\033[94m'
    BOLD = '\033[1m'
    END = '\033[0m'

def print_header(text):
    """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    print(f"\n{Colors.BOLD}{Colors.BLUE}{'=' * 60}{Colors.END}")
    print(f"{Colors.BOLD}{Colors.BLUE}{text.center(60)}{Colors.END}")
    print(f"{Colors.BOLD}{Colors.BLUE}{'=' * 60}{Colors.END}")

def check_odoo_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Odoo"""
    print(f"\n{Colors.BOLD}üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ Odoo...{Colors.END}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        response = requests.get(ODOO_URL, timeout=10)
        
        if response.status_code == 200:
            print(f"  {Colors.GREEN}‚úÖ Odoo –¥–æ—Å—Ç—É–ø–µ–Ω{Colors.END}")
            print(f"  üìç URL: {ODOO_URL}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
            login_response = requests.get(urljoin(ODOO_URL, "/web/login"), timeout=10)
            if login_response.status_code == 200:
                print(f"  {Colors.GREEN}‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞{Colors.END}")
            else:
                print(f"  {Colors.YELLOW}‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞{Colors.END}")
                
            return True
        else:
            print(f"  {Colors.RED}‚ùå Odoo –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (HTTP {response.status_code}){Colors.END}")
            return False
            
    except requests.Timeout:
        print(f"  {Colors.RED}‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ{Colors.END}")
        return False
    except Exception as e:
        print(f"  {Colors.RED}‚ùå –û—à–∏–±–∫–∞: {e}{Colors.END}")
        return False

def check_railway_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Railway"""
    print(f"\n{Colors.BOLD}üöÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ Railway...{Colors.END}")
    
    headers = {
        "Authorization": f"Bearer {RAILWAY_API_TOKEN}",
        "Content-Type": "application/json"
    }
    
    # GraphQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ
    query = """
    query GetProject($projectId: String!, $environmentId: String!) {
        project(id: $projectId) {
            name
            createdAt
            environments {
                edges {
                    node {
                        id
                        name
                    }
                }
            }
            services {
                edges {
                    node {
                        id
                        name
                        createdAt
                    }
                }
            }
        }
        deployments(
            first: 5,
            input: {
                projectId: $projectId,
                environmentId: $environmentId
            }
        ) {
            edges {
                node {
                    id
                    status
                    createdAt
                    service {
                        name
                    }
                }
            }
        }
    }
    """
    
    try:
        response = requests.post(
            RAILWAY_API_URL,
            headers=headers,
            json={
                "query": query,
                "variables": {
                    "projectId": PROJECT_ID,
                    "environmentId": ENVIRONMENT_ID
                }
            },
            timeout=10
        )
        
        if response.status_code == 200:
            data = response.json()
            
            if "data" in data and data["data"]:
                project = data["data"].get("project", {})
                deployments = data["data"].get("deployments", {}).get("edges", [])
                
                print(f"  {Colors.GREEN}‚úÖ Railway API –¥–æ—Å—Ç—É–ø–µ–Ω{Colors.END}")
                print(f"  üìÅ –ü—Ä–æ–µ–∫—Ç: {project.get('name', 'N/A')}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–µ–ø–ª–æ–µ–≤
                if deployments:
                    print(f"\n  {Colors.BOLD}üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–ø–ª–æ–∏:{Colors.END}")
                    for deploy in deployments[:3]:
                        node = deploy["node"]
                        status = node["status"]
                        service = node["service"]["name"] if node.get("service") else "Unknown"
                        
                        if status == "SUCCESS":
                            status_color = Colors.GREEN
                            status_icon = "‚úÖ"
                        elif status == "FAILED":
                            status_color = Colors.RED
                            status_icon = "‚ùå"
                        else:
                            status_color = Colors.YELLOW
                            status_icon = "‚è≥"
                        
                        created = datetime.fromisoformat(node["createdAt"].replace("Z", "+00:00"))
                        created_str = created.strftime("%d.%m %H:%M")
                        
                        print(f"    {status_icon} {service}: {status_color}{status}{Colors.END} ({created_str})")
                
                return True
            else:
                print(f"  {Colors.YELLOW}‚ö†Ô∏è Railway API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç{Colors.END}")
                return False
                
        else:
            print(f"  {Colors.RED}‚ùå Railway API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (HTTP {response.status_code}){Colors.END}")
            return False
            
    except Exception as e:
        print(f"  {Colors.RED}‚ùå –û—à–∏–±–∫–∞ Railway API: {e}{Colors.END}")
        return False

def check_database_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print(f"\n{Colors.BOLD}üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...{Colors.END}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—ã–±–æ—Ä–∞ –ë–î
        response = requests.get(urljoin(ODOO_URL, "/web/database/selector"), timeout=10)
        
        if response.status_code == 200:
            print(f"  {Colors.GREEN}‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–µ–Ω{Colors.END}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ë–î (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑-–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
            list_url = urljoin(ODOO_URL, "/web/database/list")
            list_response = requests.post(
                list_url,
                json={"jsonrpc": "2.0", "method": "call", "params": {}, "id": 1},
                timeout=10
            )
            
            if list_response.status_code == 200:
                data = list_response.json()
                if "result" in data and data["result"]:
                    databases = data["result"]
                    print(f"  üìä –ù–∞–π–¥–µ–Ω–æ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö: {len(databases)}")
                    for db in databases:
                        print(f"    - {db}")
                else:
                    print(f"  {Colors.YELLOW}‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –æ—Ç–∫–ª—é—á–µ–Ω –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏){Colors.END}")
            
            return True
        else:
            print(f"  {Colors.YELLOW}‚ö†Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω{Colors.END}")
            return False
            
    except Exception as e:
        print(f"  {Colors.YELLOW}‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ë–î: {e}{Colors.END}")
        return False

def get_project_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
    print(f"\n{Colors.BOLD}üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞:{Colors.END}")
    
    try:
        # –ß–∏—Ç–∞–µ–º PROJECT_STATUS.md
        with open("/Users/danilapryadkoicloud.com/Documents/Odoo_SportsPit_Project/PROJECT_STATUS.md", "r") as f:
            content = f.read()
            
            # –ò—â–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            if "–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:" in content:
                progress_line = [line for line in content.split("\n") if "–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:" in line][0]
                progress = progress_line.split("**")[1].replace("%", "")
                
                progress_int = int(progress)
                if progress_int < 30:
                    color = Colors.RED
                elif progress_int < 60:
                    color = Colors.YELLOW
                else:
                    color = Colors.GREEN
                
                print(f"  üìà –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {color}{progress}%{Colors.END}")
                
                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                bar_length = 40
                filled = int(bar_length * progress_int / 100)
                bar = "‚ñà" * filled + "‚ñë" * (bar_length - filled)
                print(f"  [{bar}]")
        
        # –ß–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Git
        import subprocess
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤
        commit_count = subprocess.check_output(
            ["git", "-C", "/Users/danilapryadkoicloud.com/Documents/Odoo_SportsPit_Project", 
             "rev-list", "--count", "HEAD"],
            text=True
        ).strip()
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç
        last_commit = subprocess.check_output(
            ["git", "-C", "/Users/danilapryadkoicloud.com/Documents/Odoo_SportsPit_Project",
             "log", "-1", "--pretty=%B"],
            text=True
        ).strip()
        
        print(f"\n  {Colors.BOLD}üìù Git —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:{Colors.END}")
        print(f"  üìå –ö–æ–º–º–∏—Ç–æ–≤: {commit_count}")
        print(f"  üí¨ –ü–æ—Å–ª–µ–¥–Ω–∏–π: {last_commit[:50]}...")
        
    except Exception as e:
        print(f"  {Colors.YELLOW}‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}{Colors.END}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print_header("–ú–û–ù–ò–¢–û–†–ò–ù–ì ODOO SPORTPIT")
    
    print(f"\n‚è∞ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%d.%m.%025 %H:%M:%S')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    odoo_ok = check_odoo_status()
    railway_ok = check_railway_status()
    db_ok = check_database_status()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
    get_project_stats()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    print_header("–ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–°")
    
    all_ok = odoo_ok and railway_ok
    
    if all_ok:
        print(f"\n{Colors.GREEN}{Colors.BOLD}‚úÖ –í–°–ï –°–ò–°–¢–ï–ú–´ –†–ê–ë–û–¢–ê–Æ–¢ –ù–û–†–ú–ê–õ–¨–ù–û{Colors.END}")
        print(f"\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print(f"  1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ init_odoo_database.py –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ë–î")
        print(f"  2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ install_odoo_modules.py –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥—É–ª–µ–π")
        print(f"  3. –í–æ–π–¥–∏—Ç–µ –≤ Odoo –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    else:
        print(f"\n{Colors.YELLOW}{Colors.BOLD}‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´{Colors.END}")
        
        if not odoo_ok:
            print(f"  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ–ø–ª–æ–π Odoo –Ω–∞ Railway")
        if not railway_ok:
            print(f"  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Railway API —Ç–æ–∫–µ–Ω")
        if not db_ok:
            print(f"  - –°–æ–∑–¥–∞–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ init_odoo_database.py")
    
    print(f"\n{Colors.BLUE}{'=' * 60}{Colors.END}")

if __name__ == "__main__":
    # –î–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    if len(sys.argv) > 1 and sys.argv[1] == "--watch":
        while True:
            main()
            print(f"\n{Colors.YELLOW}–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...{Colors.END}")
            time.sleep(30)
    else:
        main()
