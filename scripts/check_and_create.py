#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤/—Ä–µ—Ü–µ–ø—Ç—É—Ä
"""

import xmlrpc.client
import ssl

ODOO_URL = "https://odoosportspitproject-production.up.railway.app"
DB_NAME = "odoo_sportpit"

# –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
CREDENTIALS = [
    ("danila@usafitandjoy.com", "admin123"),
    ("test@test.com", "test123")
]

def check_and_create():
    ssl_context = ssl.create_default_context()
    ssl_context.check_hostname = False
    ssl_context.verify_mode = ssl.CERT_NONE
    
    for login, password in CREDENTIALS:
        try:
            common = xmlrpc.client.ServerProxy(f'{ODOO_URL}/xmlrpc/2/common', context=ssl_context)
            uid = common.authenticate(DB_NAME, login, password, {})
            
            if uid:
                print(f"‚úÖ –í–æ—à–µ–ª –∫–∞–∫ {login}")
                models = xmlrpc.client.ServerProxy(f'{ODOO_URL}/xmlrpc/2/object', context=ssl_context)
                
                # –ü–†–û–í–ï–†–ö–ê –ú–û–î–£–õ–ï–ô
                print("\nüì¶ –£–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–ï –ú–û–î–£–õ–ò:")
                modules = models.execute_kw(
                    DB_NAME, uid, password,
                    'ir.module.module', 'search_read',
                    [[('state', '=', 'installed')]],
                    {'fields': ['name', 'display_name'], 'limit': 200}
                )
                
                important_modules = ['mrp', 'stock', 'sale', 'purchase', 'account', 'hr', 'project']
                installed = [m['name'] for m in modules]
                
                for mod in important_modules:
                    if mod in installed:
                        print(f"  ‚úÖ {mod}")
                    else:
                        print(f"  ‚ùå {mod} - –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")
                
                # –ü–†–û–í–ï–†–ö–ê –ü–†–û–î–£–ö–¢–û–í
                print("\nüì¶ –ü–†–û–î–£–ö–¢–´:")
                products = models.execute_kw(
                    DB_NAME, uid, password,
                    'product.product', 'search_read',
                    [[]],
                    {'fields': ['name', 'default_code'], 'limit': 100}
                )
                print(f"  –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {len(products)}")
                
                if len(products) < 5:
                    print("  ‚ö†Ô∏è –ú–∞–ª–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, —Å–æ–∑–¥–∞—é...")
                    
                    # –°–û–ó–î–ê–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ô
                    print("\nüìÅ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
                    categories = {
                        '–°—ã—Ä—å–µ': None,
                        '–ì–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è': None
                    }
                    
                    for cat_name in categories:
                        cat_ids = models.execute_kw(
                            DB_NAME, uid, password,
                            'product.category', 'search',
                            [[('name', '=', cat_name)]]
                        )
                        
                        if not cat_ids:
                            cat_id = models.execute_kw(
                                DB_NAME, uid, password,
                                'product.category', 'create',
                                [{'name': cat_name}]
                            )
                            categories[cat_name] = cat_id
                            print(f"    ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {cat_name}")
                        else:
                            categories[cat_name] = cat_ids[0]
                    
                    # –°–û–ó–î–ê–ù–ò–ï –ü–†–û–î–£–ö–¢–û–í
                    print("\nüì¶ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤...")
                    
                    # –°—ã—Ä—å–µ
                    raw_materials = [
                        {'name': '–°—ã–≤–æ—Ä–æ—Ç–æ—á–Ω—ã–π –ø—Ä–æ—Ç–µ–∏–Ω 80%', 'default_code': 'RAW-WHEY', 'standard_price': 350, 'categ_id': categories['–°—ã—Ä—å–µ']},
                        {'name': '–ú–∞–ª—å—Ç–æ–¥–µ–∫—Å—Ç—Ä–∏–Ω', 'default_code': 'RAW-MALTO', 'standard_price': 80, 'categ_id': categories['–°—ã—Ä—å–µ']},
                        {'name': '–ö—Ä–µ–∞—Ç–∏–Ω –º–æ–Ω–æ–≥–∏–¥—Ä–∞—Ç', 'default_code': 'RAW-CREAT', 'standard_price': 550, 'categ_id': categories['–°—ã—Ä—å–µ']},
                        {'name': 'BCAA 2:1:1', 'default_code': 'RAW-BCAA', 'standard_price': 1200, 'categ_id': categories['–°—ã—Ä—å–µ']},
                        {'name': '–ê—Ä–æ–º–∞—Ç–∏–∑–∞—Ç–æ—Ä –í–∞–Ω–∏–ª—å', 'default_code': 'RAW-VANIL', 'standard_price': 800, 'categ_id': categories['–°—ã—Ä—å–µ']},
                    ]
                    
                    for prod in raw_materials:
                        try:
                            prod['type'] = 'product'
                            prod['uom_id'] = 1  # kg
                            prod_id = models.execute_kw(
                                DB_NAME, uid, password,
                                'product.product', 'create', [prod]
                            )
                            print(f"    ‚úÖ –°–æ–∑–¥–∞–Ω: {prod['name']}")
                        except:
                            print(f"    ‚ÑπÔ∏è –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {prod['name']}")
                    
                    # –ì–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è
                    finished = [
                        {'name': 'Whey Protein –í–∞–Ω–∏–ª—å 2–∫–≥', 'default_code': 'FIN-WHEY-2KG', 'list_price': 2500, 'categ_id': categories['–ì–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è']},
                        {'name': 'Mass Gainer 3–∫–≥', 'default_code': 'FIN-GAIN-3KG', 'list_price': 2200, 'categ_id': categories['–ì–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è']},
                        {'name': 'BCAA 300–≥', 'default_code': 'FIN-BCAA-300', 'list_price': 1800, 'categ_id': categories['–ì–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è']},
                        {'name': 'Creatine 500–≥', 'default_code': 'FIN-CREAT-500', 'list_price': 900, 'categ_id': categories['–ì–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è']},
                    ]
                    
                    for prod in finished:
                        try:
                            prod['type'] = 'product'
                            prod['uom_id'] = 1
                            prod['sale_ok'] = True
                            prod['purchase_ok'] = False
                            prod_id = models.execute_kw(
                                DB_NAME, uid, password,
                                'product.product', 'create', [prod]
                            )
                            print(f"    ‚úÖ –°–æ–∑–¥–∞–Ω: {prod['name']}")
                        except:
                            print(f"    ‚ÑπÔ∏è –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {prod['name']}")
                
                # –ü–†–û–í–ï–†–ö–ê –°–ö–õ–ê–î–û–í
                print("\nüì¶ –°–ö–õ–ê–î–´:")
                warehouses = models.execute_kw(
                    DB_NAME, uid, password,
                    'stock.warehouse', 'search_read',
                    [[]],
                    {'fields': ['name', 'code']}
                )
                
                if warehouses:
                    for wh in warehouses:
                        print(f"  ‚úÖ {wh['name']} ({wh['code']})")
                else:
                    print("  ‚ùå –°–∫–ª–∞–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    
                    # –°–æ–∑–¥–∞–µ–º —Å–∫–ª–∞–¥
                    wh_id = models.execute_kw(
                        DB_NAME, uid, password,
                        'stock.warehouse', 'create',
                        [{'name': '–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫–ª–∞–¥', 'code': 'MAIN'}]
                    )
                    print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫–ª–∞–¥")
                
                # –ü–†–û–í–ï–†–ö–ê BOM (—Ä–µ—Ü–µ–ø—Ç—É—Ä)
                print("\nüìã –†–ï–¶–ï–ü–¢–£–†–´ (BOM):")
                boms = models.execute_kw(
                    DB_NAME, uid, password,
                    'mrp.bom', 'search_read',
                    [[]],
                    {'fields': ['display_name'], 'limit': 10}
                )
                
                if boms:
                    print(f"  –ù–∞–π–¥–µ–Ω–æ —Ä–µ—Ü–µ–ø—Ç—É—Ä: {len(boms)}")
                    for bom in boms[:3]:
                        print(f"    ‚Ä¢ {bom['display_name']}")
                else:
                    print("  ‚ùå –†–µ—Ü–µ–ø—Ç—É—Ä—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")
                    print("  ‚ÑπÔ∏è –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç—É—Ä –Ω—É–∂–µ–Ω –º–æ–¥—É–ª—å MRP")
                
                print("\n" + "="*60)
                print("üìä –ò–¢–û–ì–û:")
                print(f"  –ú–æ–¥—É–ª–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {len([m for m in important_modules if m in installed])}/{len(important_modules)}")
                print(f"  –ü—Ä–æ–¥—É–∫—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {len(products)}")
                print(f"  –°–∫–ª–∞–¥–æ–≤: {len(warehouses)}")
                print(f"  –†–µ—Ü–µ–ø—Ç—É—Ä: {len(boms)}")
                
                return True
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å {login}: {str(e)[:100]}")
    
    return False

if __name__ == "__main__":
    print("="*60)
    print("üîç –ü–†–û–í–ï–†–ö–ê –ò –°–û–ó–î–ê–ù–ò–ï –î–ê–ù–ù–´–• –í ODOO")
    print("="*60)
    
    check_and_create()
