#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ú–æ–π–°–∫–ª–∞–¥ –≤ Odoo
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º URL API
"""

import urllib.request
import urllib.parse
import xmlrpc.client
import ssl
import json
import base64
from datetime import datetime

# === –ù–ê–°–¢–†–û–ô–ö–ò –ú–û–ô–°–ö–õ–ê–î ===
MOYSKLAD_TOKEN = "7bbede5c5ac9c28ddf7995042fcbbe1fecb274e1"
# –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô URL - –∏—Å–ø–æ–ª—å–∑—É–µ–º api.moysklad.ru
MOYSKLAD_BASE_URL = "https://api.moysklad.ru/api/remap/1.2"

# === –ù–ê–°–¢–†–û–ô–ö–ò ODOO ===
ODOO_URL = "https://odoosportspitproject-production.up.railway.app"
DB_NAME = "odoo_sportpit"
ODOO_LOGIN = "danila@usafitandjoy.com"
ODOO_PASSWORD = "admin123"

class MoySkladFullSync:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–∏—Å—Ç–µ–º–∞–º...")
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Odoo
        ssl_context = ssl.create_default_context()
        ssl_context.check_hostname = False
        ssl_context.verify_mode = ssl.CERT_NONE
        
        self.odoo_common = xmlrpc.client.ServerProxy(f'{ODOO_URL}/xmlrpc/2/common', context=ssl_context)
        self.odoo_uid = self.odoo_common.authenticate(DB_NAME, ODOO_LOGIN, ODOO_PASSWORD, {})
        
        if self.odoo_uid:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Odoo")
            self.odoo_models = xmlrpc.client.ServerProxy(f'{ODOO_URL}/xmlrpc/2/object', context=ssl_context)
        else:
            raise Exception("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Odoo")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL –¥–ª—è –ú–æ–π–°–∫–ª–∞–¥
        self.ssl_context = ssl.create_default_context()
        
        # –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ ID
        self.category_map = {}
        self.partner_map = {}
        self.product_map = {}
        self.warehouse_map = {}
    
    def moysklad_request(self, endpoint, params=None):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API –ú–æ–π–°–∫–ª–∞–¥ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏"""
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL
        url = f"{MOYSKLAD_BASE_URL}/{endpoint}"
        if params:
            url += "?" + urllib.parse.urlencode(params)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
        request = urllib.request.Request(url, method='GET')
        
        # –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ú–æ–π–°–∫–ª–∞–¥ API 1.2
        request.add_header('Authorization', f'Bearer {MOYSKLAD_TOKEN}')
        request.add_header('Accept-Encoding', 'gzip')
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            with urllib.request.urlopen(request, context=self.ssl_context) as response:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∂–∞—Ç –ª–∏ –æ—Ç–≤–µ—Ç
                if response.headers.get('Content-Encoding') == 'gzip':
                    import gzip
                    data = gzip.decompress(response.read())
                else:
                    data = response.read()
                
                return json.loads(data.decode('utf-8'))
                
        except urllib.error.HTTPError as e:
            if e.code == 401:
                print("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –ú–æ–π–°–∫–ª–∞–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω.")
            elif e.code == 403:
                print("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ —Ç–æ–∫–µ–Ω–∞.")
            else:
                error_body = e.read().decode('utf-8')
                print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {e.code}: {e.reason}")
                try:
                    error_json = json.loads(error_body)
                    if 'errors' in error_json:
                        for err in error_json['errors']:
                            print(f"  –î–µ—Ç–∞–ª–∏: {err.get('error', str(err))}")
                except:
                    print(f"  –û—Ç–≤–µ—Ç: {error_body[:200]}")
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return None
    
    def test_connection(self):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ú–æ–π–°–∫–ª–∞–¥"""
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ú–æ–π–°–∫–ª–∞–¥...")
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
        result = self.moysklad_request("context/employee")
        
        if result:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –ú–æ–π–°–∫–ª–∞–¥")
            if isinstance(result, dict) and 'rows' in result and result['rows']:
                employee = result['rows'][0]
                print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {employee.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            return True
        return False
    
    def get_all_data_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤—Å–µ–º –¥–∞–Ω–Ω—ã–º –≤ –ú–æ–π–°–∫–ª–∞–¥"""
        print("\nüìä –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –í –ú–û–ô–°–ö–õ–ê–î:")
        print("="*50)
        
        entities = [
            ('entity/product', '–¢–æ–≤–∞—Ä—ã'),
            ('entity/variant', '–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏'),
            ('entity/counterparty', '–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã'),
            ('entity/organization', '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏'),
            ('entity/store', '–°–∫–ª–∞–¥—ã'),
            ('entity/productfolder', '–ì—Ä—É–ø–ø—ã —Ç–æ–≤–∞—Ä–æ–≤'),
        ]
        
        stats = {}
        for endpoint, name in entities:
            result = self.moysklad_request(endpoint, {'limit': 1})
            if result and 'meta' in result:
                count = result['meta'].get('size', 0)
                stats[endpoint] = count
                if count > 0:
                    print(f"  ‚Ä¢ {name:20} : {count:6} –∑–∞–ø–∏—Å–µ–π")
        
        return stats
    
    def sync_product_folders(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≥—Ä—É–ø–ø —Ç–æ–≤–∞—Ä–æ–≤ (–∫–∞—Ç–µ–≥–æ—Ä–∏–π)"""
        print("\nüìÅ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ö–ê–¢–ï–ì–û–†–ò–ô –¢–û–í–ê–†–û–í:")
        print("-"*40)
        
        result = self.moysklad_request("entity/productfolder", {'limit': 1000})
        
        if not result or 'rows' not in result:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            return
        
        folders = result['rows']
        created_count = 0
        
        for folder in folders:
            ms_id = folder['id']
            name = folder['name']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
            existing = self.odoo_models.execute_kw(
                DB_NAME, self.odoo_uid, ODOO_PASSWORD,
                'product.category', 'search',
                [[('name', '=', name)]]
            )
            
            if existing:
                cat_id = existing[0]
                print(f"  ‚ÑπÔ∏è –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {name}")
            else:
                # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                try:
                    cat_id = self.odoo_models.execute_kw(
                        DB_NAME, self.odoo_uid, ODOO_PASSWORD,
                        'product.category', 'create',
                        [{'name': name}]
                    )
                    print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞: {name}")
                    created_count += 1
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {name}: {str(e)[:50]}")
                    continue
            
            self.category_map[ms_id] = cat_id
        
        print(f"\n  –ò—Ç–æ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(self.category_map)}")
        print(f"  –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö: {created_count}")
    
    def sync_counterparties(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤"""
        print("\nüë• –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ö–û–ù–¢–†–ê–ì–ï–ù–¢–û–í:")
        print("-"*40)
        
        offset = 0
        limit = 100
        total_created = 0
        
        while True:
            result = self.moysklad_request("entity/counterparty", {
                'limit': limit,
                'offset': offset
            })
            
            if not result or 'rows' not in result:
                break
            
            counterparties = result['rows']
            
            if not counterparties:
                break
            
            for cp in counterparties:
                ms_id = cp['id']
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                partner_data = {
                    'name': cp.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                    'is_company': cp.get('companyType') == 'legal',
                    'supplier_rank': 1,
                    'customer_rank': 1,
                    'phone': cp.get('phone', ''),
                    'email': cp.get('email', ''),
                    'vat': cp.get('inn', ''),
                }
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
                domain = [('name', '=', partner_data['name'])]
                if partner_data['vat']:
                    domain = [('vat', '=', partner_data['vat'])]
                
                existing = self.odoo_models.execute_kw(
                    DB_NAME, self.odoo_uid, ODOO_PASSWORD,
                    'res.partner', 'search', [domain]
                )
                
                try:
                    if existing:
                        partner_id = existing[0]
                        self.odoo_models.execute_kw(
                            DB_NAME, self.odoo_uid, ODOO_PASSWORD,
                            'res.partner', 'write',
                            [partner_id, partner_data]
                        )
                        print(f"  üìù –û–±–Ω–æ–≤–ª–µ–Ω: {partner_data['name']}")
                    else:
                        partner_id = self.odoo_models.execute_kw(
                            DB_NAME, self.odoo_uid, ODOO_PASSWORD,
                            'res.partner', 'create', [partner_data]
                        )
                        print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω: {partner_data['name']}")
                        total_created += 1
                    
                    self.partner_map[ms_id] = partner_id
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å {partner_data['name']}: {str(e)[:50]}")
            
            offset += limit
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞
            if offset >= 100:
                print("\n  ‚ö†Ô∏è –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ 100 –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)")
                break
        
        print(f"\n  –ò—Ç–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤: {len(self.partner_map)}")
        print(f"  –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö: {total_created}")
    
    def sync_products(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤"""
        print("\nüì¶ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –¢–û–í–ê–†–û–í:")
        print("-"*40)
        
        offset = 0
        limit = 50
        total_created = 0
        total_updated = 0
        
        while True:
            result = self.moysklad_request("entity/product", {
                'limit': limit,
                'offset': offset
            })
            
            if not result or 'rows' not in result:
                break
            
            products = result['rows']
            
            if not products:
                break
            
            for product in products:
                ms_id = product['id']
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                category_id = 1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if product.get('productFolder'):
                    folder_id = product['productFolder']['meta']['href'].split('/')[-1]
                    category_id = self.category_map.get(folder_id, 1)
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
                product_data = {
                    'name': product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                    'default_code': product.get('code', product.get('article', '')),
                    'type': 'product',
                    'categ_id': category_id,
                    'sale_ok': not product.get('archived', False),
                    'purchase_ok': not product.get('archived', False),
                    'list_price': 0,
                    'standard_price': 0,
                    'description': product.get('description', ''),
                }
                
                # –¶–µ–Ω—ã
                if product.get('salePrices'):
                    for price in product['salePrices']:
                        if price.get('value'):
                            product_data['list_price'] = price.get('value', 0) / 100
                            break
                
                if product.get('buyPrice'):
                    product_data['standard_price'] = product['buyPrice'].get('value', 0) / 100
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
                existing = []
                if product_data['default_code']:
                    existing = self.odoo_models.execute_kw(
                        DB_NAME, self.odoo_uid, ODOO_PASSWORD,
                        'product.product', 'search',
                        [[('default_code', '=', product_data['default_code'])]]
                    )
                
                try:
                    if existing:
                        self.odoo_models.execute_kw(
                            DB_NAME, self.odoo_uid, ODOO_PASSWORD,
                            'product.product', 'write',
                            [existing[0], product_data]
                        )
                        product_id = existing[0]
                        total_updated += 1
                        print(f"  üìù –û–±–Ω–æ–≤–ª–µ–Ω: {product_data['name']}")
                    else:
                        product_id = self.odoo_models.execute_kw(
                            DB_NAME, self.odoo_uid, ODOO_PASSWORD,
                            'product.product', 'create', [product_data]
                        )
                        total_created += 1
                        print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω: {product_data['name']}")
                    
                    self.product_map[ms_id] = product_id
                    
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å —Ç–æ–≤–∞—Ä–æ–º {product_data['name']}: {str(e)[:50]}")
            
            offset += limit
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞
            if offset >= 200:
                print("\n  ‚ö†Ô∏è –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ 200 —Ç–æ–≤–∞—Ä–æ–≤ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)")
                break
        
        print(f"\n  –ò—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(self.product_map)}")
        print(f"  –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö: {total_created}")
        print(f"  –û–±–Ω–æ–≤–ª–µ–Ω–æ: {total_updated}")
    
    def run_full_sync(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        print("\n" + "="*60)
        print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò")
        print("="*60)
        
        if not self.test_connection():
            print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ú–æ–π–°–∫–ª–∞–¥")
            print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω API")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = self.get_all_data_stats()
        
        print("\n" + "="*60)
        print("üì• –ù–ê–ß–ê–õ–û –ò–ú–ü–û–†–¢–ê –î–ê–ù–ù–´–•")
        print("="*60)
        
        # –ü–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω!
        self.sync_product_folders()  # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
        self.sync_counterparties()   # –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã
        self.sync_products()         # –¢–æ–≤–∞—Ä—ã
        
        print("\n" + "="*60)
        print("‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("="*60)
        
        print("\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"  ‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(self.category_map)}")
        print(f"  ‚Ä¢ –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤: {len(self.partner_map)}")
        print(f"  ‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤: {len(self.product_map)}")

def main():
    print("="*60)
    print("üîÑ –ü–û–õ–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ú–û–ô–°–ö–õ–ê–î ‚Üí ODOO")
    print("="*60)
    print("\n‚ö†Ô∏è –ë—É–¥—É—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã:")
    print("  ‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤")
    print("  ‚Ä¢ –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã")
    print("  ‚Ä¢ –¢–æ–≤–∞—Ä—ã —Å —Ü–µ–Ω–∞–º–∏")
    
    confirm = input("\n‚ùì –ù–∞—á–∞—Ç—å –∏–º–ø–æ—Ä—Ç? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
    
    if confirm in ['–¥–∞', 'yes', 'y', '–¥']:
        try:
            syncer = MoySkladFullSync()
            syncer.run_full_sync()
        except Exception as e:
            print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
    else:
        print("\n‚ùå –ò–º–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω")

if __name__ == "__main__":
    main()
