#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP —á–µ—Ä–µ–∑ Brevo (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å)
Brevo –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç 300 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–∏—Å–µ–º –≤ –¥–µ–Ω—å
"""

import xmlrpc.client
import ssl
import sys

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Odoo
url = 'https://odoosportspitproject-production.up.railway.app'
db = 'odoo_sportpit'
username = 'danila@usafitandjoy.com'
password = 'admin_sportpit_2024'

def setup_brevo_smtp():
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Brevo SMTP
    
    –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è SMTP –∫–ª—é—á–∞:
    1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ https://www.brevo.com (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)
    2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Settings -> SMTP & API
    3. –°–æ–∑–¥–∞–π—Ç–µ SMTP –∫–ª—é—á
    4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –≤ —ç—Ç–æ–º —Å–∫—Ä–∏–ø—Ç–µ
    """
    
    print("=" * 60)
    print("–ù–ê–°–¢–†–û–ô–ö–ê BREVO SMTP (–ë–ï–°–ü–õ–ê–¢–ù–û)")
    print("=" * 60)
    print("\nüìß Brevo –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç:")
    print("  ‚Ä¢ 300 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–∏—Å–µ–º –≤ –¥–µ–Ω—å")
    print("  ‚Ä¢ –ù–∞–¥–µ–∂–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞")
    print("  ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–æ–∫")
    print("\nüîó –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: https://www.brevo.com")
    print("\n–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
    print("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Settings -> SMTP & API")
    print("2. –°–æ–∑–¥–∞–π—Ç–µ SMTP –∫–ª—é—á")
    print("3. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–∏–∂–µ\n")
    
    smtp_login = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –≤ Brevo: ")
    smtp_password = input("–í–≤–µ–¥–∏—Ç–µ SMTP –∫–ª—é—á –∏–∑ Brevo: ")
    
    if not smtp_login or not smtp_password:
        print("‚ùå Email –∏ SMTP –∫–ª—é—á –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!")
        return False
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Brevo SMTP
    brevo_config = {
        'name': 'Brevo SMTP Server',
        'smtp_host': 'smtp-relay.brevo.com',
        'smtp_port': 587,
        'smtp_user': smtp_login,
        'smtp_pass': smtp_password,
        'smtp_encryption': 'starttls',
        'sequence': 10,
        'active': True
    }
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç SSL
        context = ssl._create_unverified_context()
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Odoo
        common = xmlrpc.client.ServerProxy(f'{url}/xmlrpc/2/common', context=context)
        uid = common.authenticate(db, username, password, {})
        
        if not uid:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Odoo")
            return False
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Odoo —É—Å–ø–µ—à–Ω–æ")
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—è–º–∏
        models = xmlrpc.client.ServerProxy(f'{url}/xmlrpc/2/object', context=context)
        
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ SMTP —Å–µ—Ä–≤–µ—Ä—ã
        existing_servers = models.execute_kw(db, uid, password,
            'ir.mail_server', 'search',
            [[]])
        
        if existing_servers:
            models.execute_kw(db, uid, password,
                'ir.mail_server', 'write',
                [existing_servers, {'active': False}])
            print("‚ö†Ô∏è –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ SMTP —Å–µ—Ä–≤–µ—Ä—ã –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π SMTP —Å–µ—Ä–≤–µ—Ä
        server_id = models.execute_kw(db, uid, password,
            'ir.mail_server', 'create',
            [brevo_config])
        
        if server_id:
            print(f"\n‚úÖ Brevo SMTP —Å–µ—Ä–≤–µ—Ä —Å–æ–∑–¥–∞–Ω!")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏—Å—Ç–µ–º—ã
            params = {
                'mail.default.from': f'noreply@{smtp_login.split("@")[1]}',
                'mail.catchall.domain': smtp_login.split("@")[1],
                'mail.bounce.alias': 'bounce',
                'mail.catchall.alias': 'catchall'
            }
            
            for key, value in params.items():
                param_ids = models.execute_kw(db, uid, password,
                    'ir.config_parameter', 'search',
                    [[['key', '=', key]]])
                
                if param_ids:
                    models.execute_kw(db, uid, password,
                        'ir.config_parameter', 'write',
                        [param_ids, {'value': value}])
                else:
                    models.execute_kw(db, uid, password,
                        'ir.config_parameter', 'create',
                        [{'key': key, 'value': value}])
            
            print("\n‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã email –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            print("\nüéâ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
            print("\n–¢–µ–ø–µ—Ä—å —Ñ—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å!")
            print("–¢–∞–∫–∂–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ:")
            print("  ‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—á–µ—Ç–∞ –ø–æ email")
            print("  ‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            print("  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å email –º–∞—Ä–∫–µ—Ç–∏–Ω–≥")
            
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SMTP —Å–µ—Ä–≤–µ—Ä")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    setup_brevo_smtp()
